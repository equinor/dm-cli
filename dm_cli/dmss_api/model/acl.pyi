# coding: utf-8

"""
    Data Modelling Storage Service

    API for basic data modelling interaction  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dmss_api import schemas  # noqa: F401


class ACL(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    acl:
  owner: 'user_id'
  roles:
    'role': WRITE
  users:
    'user_id': WRITE
  others: READ
    """


    class MetaOapg:
        required = {
            "owner",
        }

        class properties:
            owner = schemas.StrSchema


            class roles(
                schemas.DictSchema
            ):


                class MetaOapg:

                    @staticmethod
                    def additional_properties() -> typing.Type['AccessLevel']:
                        return AccessLevel

                def __getitem__(self, name: typing.Union[str, ]) -> 'AccessLevel':
                    # dict_instance[name] accessor
                    return super().__getitem__(name)

                def get_item_oapg(self, name: typing.Union[str, ]) -> 'AccessLevel':
                    return super().get_item_oapg(name)

                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: 'AccessLevel',
                ) -> 'roles':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )


            class users(
                schemas.DictSchema
            ):


                class MetaOapg:

                    @staticmethod
                    def additional_properties() -> typing.Type['AccessLevel']:
                        return AccessLevel

                def __getitem__(self, name: typing.Union[str, ]) -> 'AccessLevel':
                    # dict_instance[name] accessor
                    return super().__getitem__(name)

                def get_item_oapg(self, name: typing.Union[str, ]) -> 'AccessLevel':
                    return super().get_item_oapg(name)

                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: 'AccessLevel',
                ) -> 'users':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )


            class others(
                schemas.ComposedSchema,
            ):


                class MetaOapg:

                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            AccessLevel,
                        ]


                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'others':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "owner": owner,
                "roles": roles,
                "users": users,
                "others": others,
            }

    owner: MetaOapg.properties.owner

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> MetaOapg.properties.owner: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roles"]) -> MetaOapg.properties.roles: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["users"]) -> MetaOapg.properties.users: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["others"]) -> MetaOapg.properties.others: ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...

    def __getitem__(self, name: typing.Union[typing_extensions.Literal["owner", "roles", "users", "others", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)


    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> MetaOapg.properties.owner: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roles"]) -> typing.Union[MetaOapg.properties.roles, schemas.Unset]: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["users"]) -> typing.Union[MetaOapg.properties.users, schemas.Unset]: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["others"]) -> typing.Union[MetaOapg.properties.others, schemas.Unset]: ...

    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...

    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["owner", "roles", "users", "others", ], str]):
        return super().get_item_oapg(name)


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        owner: typing.Union[MetaOapg.properties.owner, str, ],
        roles: typing.Union[MetaOapg.properties.roles, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        users: typing.Union[MetaOapg.properties.users, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        others: typing.Union[MetaOapg.properties.others, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ACL':
        return super().__new__(
            cls,
            *args,
            owner=owner,
            roles=roles,
            users=users,
            others=others,
            _configuration=_configuration,
            **kwargs,
        )

from dmss_api.model.access_level import AccessLevel
