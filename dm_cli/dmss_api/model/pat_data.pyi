# coding: utf-8

"""
    Data Modelling Storage Service

    API for basic data modelling interaction  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dmss_api import schemas  # noqa: F401


class PATData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "user_id",
            "expire",
            "scope",
        }

        class properties:
            user_id = schemas.StrSchema

            @staticmethod
            def scope() -> typing.Type['AccessLevel']:
                return AccessLevel
            expire = schemas.DateTimeSchema
            pat_hash = schemas.StrSchema
            uuid = schemas.StrSchema


            class roles(
                schemas.ListSchema
            ):


                class MetaOapg:
                    items = schemas.StrSchema

                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'roles':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "user_id": user_id,
                "scope": scope,
                "expire": expire,
                "pat_hash": pat_hash,
                "uuid": uuid,
                "roles": roles,
            }

    user_id: MetaOapg.properties.user_id
    expire: MetaOapg.properties.expire
    scope: 'AccessLevel'

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scope"]) -> 'AccessLevel': ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expire"]) -> MetaOapg.properties.expire: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pat_hash"]) -> MetaOapg.properties.pat_hash: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roles"]) -> MetaOapg.properties.roles: ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...

    def __getitem__(self, name: typing.Union[typing_extensions.Literal["user_id", "scope", "expire", "pat_hash", "uuid", "roles", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)


    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scope"]) -> 'AccessLevel': ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expire"]) -> MetaOapg.properties.expire: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pat_hash"]) -> typing.Union[MetaOapg.properties.pat_hash, schemas.Unset]: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> typing.Union[MetaOapg.properties.uuid, schemas.Unset]: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roles"]) -> typing.Union[MetaOapg.properties.roles, schemas.Unset]: ...

    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...

    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["user_id", "scope", "expire", "pat_hash", "uuid", "roles", ], str]):
        return super().get_item_oapg(name)


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        user_id: typing.Union[MetaOapg.properties.user_id, str, ],
        expire: typing.Union[MetaOapg.properties.expire, str, datetime, ],
        scope: 'AccessLevel',
        pat_hash: typing.Union[MetaOapg.properties.pat_hash, str, schemas.Unset] = schemas.unset,
        uuid: typing.Union[MetaOapg.properties.uuid, str, schemas.Unset] = schemas.unset,
        roles: typing.Union[MetaOapg.properties.roles, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PATData':
        return super().__new__(
            cls,
            *args,
            user_id=user_id,
            expire=expire,
            scope=scope,
            pat_hash=pat_hash,
            uuid=uuid,
            roles=roles,
            _configuration=_configuration,
            **kwargs,
        )

from dmss_api.model.access_level import AccessLevel
