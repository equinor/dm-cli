# coding: utf-8

"""
    Data Modelling Storage Service

    API for basic data modelling interaction  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dmss_api import schemas  # noqa: F401


class DataSourceRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "repositories",
            "name",
        }

        class properties:
            name = schemas.StrSchema


            class repositories(
                schemas.DictSchema
            ):


                class MetaOapg:

                    @staticmethod
                    def additional_properties() -> typing.Type['Repository']:
                        return Repository

                def __getitem__(self, name: typing.Union[str, ]) -> 'Repository':
                    # dict_instance[name] accessor
                    return super().__getitem__(name)

                def get_item_oapg(self, name: typing.Union[str, ]) -> 'Repository':
                    return super().get_item_oapg(name)

                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: 'Repository',
                ) -> 'repositories':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "name": name,
                "repositories": repositories,
            }

    repositories: MetaOapg.properties.repositories
    name: MetaOapg.properties.name

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["repositories"]) -> MetaOapg.properties.repositories: ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...

    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "repositories", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)


    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["repositories"]) -> MetaOapg.properties.repositories: ...

    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...

    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "repositories", ], str]):
        return super().get_item_oapg(name)


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        repositories: typing.Union[MetaOapg.properties.repositories, dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DataSourceRequest':
        return super().__new__(
            cls,
            *args,
            repositories=repositories,
            name=name,
            _configuration=_configuration,
            **kwargs,
        )

from dmss_api.model.repository import Repository
