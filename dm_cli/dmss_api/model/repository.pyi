# coding: utf-8

"""
    Data Modelling Storage Service

    API for basic data modelling interaction  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dmss_api import schemas  # noqa: F401


class Repository(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "type",
        }

        class properties:

            @staticmethod
            def type() -> typing.Type['RepositoryType']:
                return RepositoryType


            class data_types(
                schemas.ListSchema
            ):


                class MetaOapg:

                    @staticmethod
                    def items() -> typing.Type['StorageDataTypes']:
                        return StorageDataTypes

                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['StorageDataTypes'], typing.List['StorageDataTypes']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'data_types':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> 'StorageDataTypes':
                    return super().__getitem__(i)
            host = schemas.StrSchema
            port = schemas.IntSchema
            username = schemas.StrSchema
            password = schemas.StrSchema
            database = schemas.StrSchema
            collection = schemas.StrSchema
            account_url = schemas.StrSchema
            container = schemas.StrSchema
            tls = schemas.BoolSchema
            __annotations__ = {
                "type": type,
                "data_types": data_types,
                "host": host,
                "port": port,
                "username": username,
                "password": password,
                "database": database,
                "collection": collection,
                "account_url": account_url,
                "container": container,
                "tls": tls,
            }

    type: 'RepositoryType'

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'RepositoryType': ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data_types"]) -> MetaOapg.properties.data_types: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["host"]) -> MetaOapg.properties.host: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["port"]) -> MetaOapg.properties.port: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["password"]) -> MetaOapg.properties.password: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["database"]) -> MetaOapg.properties.database: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collection"]) -> MetaOapg.properties.collection: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_url"]) -> MetaOapg.properties.account_url: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["container"]) -> MetaOapg.properties.container: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tls"]) -> MetaOapg.properties.tls: ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...

    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "data_types", "host", "port", "username", "password", "database", "collection", "account_url", "container", "tls", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)


    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> 'RepositoryType': ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data_types"]) -> typing.Union[MetaOapg.properties.data_types, schemas.Unset]: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["host"]) -> typing.Union[MetaOapg.properties.host, schemas.Unset]: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["port"]) -> typing.Union[MetaOapg.properties.port, schemas.Unset]: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> typing.Union[MetaOapg.properties.username, schemas.Unset]: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["password"]) -> typing.Union[MetaOapg.properties.password, schemas.Unset]: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["database"]) -> typing.Union[MetaOapg.properties.database, schemas.Unset]: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collection"]) -> typing.Union[MetaOapg.properties.collection, schemas.Unset]: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_url"]) -> typing.Union[MetaOapg.properties.account_url, schemas.Unset]: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["container"]) -> typing.Union[MetaOapg.properties.container, schemas.Unset]: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tls"]) -> typing.Union[MetaOapg.properties.tls, schemas.Unset]: ...

    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...

    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "data_types", "host", "port", "username", "password", "database", "collection", "account_url", "container", "tls", ], str]):
        return super().get_item_oapg(name)


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        type: 'RepositoryType',
        data_types: typing.Union[MetaOapg.properties.data_types, list, tuple, schemas.Unset] = schemas.unset,
        host: typing.Union[MetaOapg.properties.host, str, schemas.Unset] = schemas.unset,
        port: typing.Union[MetaOapg.properties.port, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        username: typing.Union[MetaOapg.properties.username, str, schemas.Unset] = schemas.unset,
        password: typing.Union[MetaOapg.properties.password, str, schemas.Unset] = schemas.unset,
        database: typing.Union[MetaOapg.properties.database, str, schemas.Unset] = schemas.unset,
        collection: typing.Union[MetaOapg.properties.collection, str, schemas.Unset] = schemas.unset,
        account_url: typing.Union[MetaOapg.properties.account_url, str, schemas.Unset] = schemas.unset,
        container: typing.Union[MetaOapg.properties.container, str, schemas.Unset] = schemas.unset,
        tls: typing.Union[MetaOapg.properties.tls, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Repository':
        return super().__new__(
            cls,
            *args,
            type=type,
            data_types=data_types,
            host=host,
            port=port,
            username=username,
            password=password,
            database=database,
            collection=collection,
            account_url=account_url,
            container=container,
            tls=tls,
            _configuration=_configuration,
            **kwargs,
        )

from dmss_api.model.repository_type import RepositoryType
from dmss_api.model.storage_data_types import StorageDataTypes
