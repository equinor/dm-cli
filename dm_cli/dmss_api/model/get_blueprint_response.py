# coding: utf-8

"""
    Data Modelling Storage Service

    API for basic data modelling interaction  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dmss_api import schemas  # noqa: F401


class GetBlueprintResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "blueprint",
            "storageRecipes",
            "uiRecipes",
        }

        class properties:
            blueprint = schemas.DictSchema


            class uiRecipes(
                schemas.ListSchema
            ):


                class MetaOapg:
                    items = schemas.DictSchema

                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'uiRecipes':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)


            class storageRecipes(
                schemas.ListSchema
            ):


                class MetaOapg:
                    items = schemas.DictSchema

                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'storageRecipes':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "blueprint": blueprint,
                "uiRecipes": uiRecipes,
                "storageRecipes": storageRecipes,
            }

    blueprint: MetaOapg.properties.blueprint
    storageRecipes: MetaOapg.properties.storageRecipes
    uiRecipes: MetaOapg.properties.uiRecipes

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blueprint"]) -> MetaOapg.properties.blueprint: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uiRecipes"]) -> MetaOapg.properties.uiRecipes: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["storageRecipes"]) -> MetaOapg.properties.storageRecipes: ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...

    def __getitem__(self, name: typing.Union[typing_extensions.Literal["blueprint", "uiRecipes", "storageRecipes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)


    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blueprint"]) -> MetaOapg.properties.blueprint: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uiRecipes"]) -> MetaOapg.properties.uiRecipes: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["storageRecipes"]) -> MetaOapg.properties.storageRecipes: ...

    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...

    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["blueprint", "uiRecipes", "storageRecipes", ], str]):
        return super().get_item_oapg(name)


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        blueprint: typing.Union[MetaOapg.properties.blueprint, dict, frozendict.frozendict, ],
        storageRecipes: typing.Union[MetaOapg.properties.storageRecipes, list, tuple, ],
        uiRecipes: typing.Union[MetaOapg.properties.uiRecipes, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GetBlueprintResponse':
        return super().__new__(
            cls,
            *args,
            blueprint=blueprint,
            storageRecipes=storageRecipes,
            uiRecipes=uiRecipes,
            _configuration=_configuration,
            **kwargs,
        )
